{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth API\nexport const authService = {\n  async login(username, password) {\n    const response = await api.post('/auth/login', {\n      username,\n      password\n    });\n    return response.data;\n  },\n  async register(userData) {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n  async getCurrentUser() {\n    const response = await api.get('/auth/me');\n    return response.data;\n  },\n  async refreshToken() {\n    const response = await api.post('/auth/refresh');\n    return response.data;\n  },\n  async logout() {\n    await api.post('/auth/logout');\n  },\n  async changePassword(currentPassword, newPassword) {\n    await api.post('/auth/change-password', {\n      current_password: currentPassword,\n      new_password: newPassword\n    });\n  }\n};\n\n// Projects API\nexport const projectsService = {\n  async getAll() {\n    const response = await api.get('/projects');\n    return response.data;\n  },\n  async getById(id) {\n    const response = await api.get(`/projects/${id}`);\n    return response.data;\n  },\n  async create(project) {\n    const response = await api.post('/projects', project);\n    return response.data;\n  },\n  async update(id, project) {\n    const response = await api.put(`/projects/${id}`, project);\n    return response.data;\n  },\n  async delete(id) {\n    await api.delete(`/projects/${id}`);\n  },\n  async getStats(id) {\n    const response = await api.get(`/projects/${id}/stats`);\n    return response.data;\n  }\n};\n\n// Tasks API\nexport const tasksService = {\n  async getAll(params) {\n    const response = await api.get('/tasks', {\n      params\n    });\n    return response.data;\n  },\n  async getById(id) {\n    const response = await api.get(`/tasks/${id}`);\n    return response.data;\n  },\n  async create(task) {\n    const response = await api.post('/tasks', task);\n    return response.data;\n  },\n  async update(id, task) {\n    const response = await api.put(`/tasks/${id}`, task);\n    return response.data;\n  },\n  async delete(id) {\n    await api.delete(`/tasks/${id}`);\n  },\n  async updateStatus(id, status) {\n    const response = await api.patch(`/tasks/${id}/status`, {\n      status\n    });\n    return response.data;\n  },\n  async getComments(id) {\n    const response = await api.get(`/tasks/${id}/comments`);\n    return response.data;\n  },\n  async addComment(id, content) {\n    const response = await api.post(`/tasks/${id}/comments`, {\n      content\n    });\n    return response.data;\n  },\n  async getStats() {\n    const response = await api.get('/tasks/stats/overview');\n    return response.data;\n  }\n};\n\n// Users API\nexport const usersService = {\n  async getAll() {\n    const response = await api.get('/users');\n    return response.data;\n  },\n  async getById(id) {\n    const response = await api.get(`/users/${id}`);\n    return response.data;\n  },\n  async create(user) {\n    const response = await api.post('/users', user);\n    return response.data;\n  },\n  async update(id, user) {\n    const response = await api.put(`/users/${id}`, user);\n    return response.data;\n  },\n  async delete(id) {\n    await api.delete(`/users/${id}`);\n  },\n  async getWorkload(id) {\n    const response = await api.get(`/users/${id}/workload`);\n    return response.data;\n  },\n  async getTasks(id, params) {\n    const response = await api.get(`/users/${id}/tasks`, {\n      params\n    });\n    return response.data;\n  },\n  async changePassword(id, currentPassword, newPassword) {\n    await api.patch(`/users/${id}/password`, {\n      current_password: currentPassword,\n      new_password: newPassword\n    });\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","authService","login","username","password","response","post","data","register","userData","getCurrentUser","get","refreshToken","logout","changePassword","currentPassword","newPassword","current_password","new_password","projectsService","getAll","getById","id","project","update","put","delete","getStats","tasksService","params","task","updateStatus","status","patch","getComments","addComment","content","usersService","user","getWorkload","getTasks"],"sources":["/Users/Shared/jira/client/src/services/apiService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Project, Task, User, Comment, TaskStats, ProjectStats, UserWorkload } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n});\n\n// Add token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth API\nexport const authService = {\n  async login(username: string, password: string): Promise<{ user: User; token: string }> {\n    const response = await api.post('/auth/login', { username, password });\n    return response.data;\n  },\n\n  async register(userData: {\n    username: string;\n    email: string;\n    password: string;\n    full_name: string;\n  }): Promise<{ user: User; token: string }> {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n\n  async getCurrentUser(): Promise<User> {\n    const response = await api.get('/auth/me');\n    return response.data;\n  },\n\n  async refreshToken(): Promise<{ token: string }> {\n    const response = await api.post('/auth/refresh');\n    return response.data;\n  },\n\n  async logout(): Promise<void> {\n    await api.post('/auth/logout');\n  },\n\n  async changePassword(currentPassword: string, newPassword: string): Promise<void> {\n    await api.post('/auth/change-password', {\n      current_password: currentPassword,\n      new_password: newPassword,\n    });\n  },\n};\n\n// Projects API\nexport const projectsService = {\n  async getAll(): Promise<Project[]> {\n    const response = await api.get('/projects');\n    return response.data;\n  },\n\n  async getById(id: number): Promise<Project> {\n    const response = await api.get(`/projects/${id}`);\n    return response.data;\n  },\n\n  async create(project: Partial<Project>): Promise<Project> {\n    const response = await api.post('/projects', project);\n    return response.data;\n  },\n\n  async update(id: number, project: Partial<Project>): Promise<Project> {\n    const response = await api.put(`/projects/${id}`, project);\n    return response.data;\n  },\n\n  async delete(id: number): Promise<void> {\n    await api.delete(`/projects/${id}`);\n  },\n\n  async getStats(id: number): Promise<ProjectStats> {\n    const response = await api.get(`/projects/${id}/stats`);\n    return response.data;\n  },\n};\n\n// Tasks API\nexport const tasksService = {\n  async getAll(params?: {\n    project_id?: number;\n    assigned_to?: number;\n    status?: string;\n    priority?: string;\n    search?: string;\n    sort_by?: string;\n    sort_order?: string;\n  }): Promise<Task[]> {\n    const response = await api.get('/tasks', { params });\n    return response.data;\n  },\n\n  async getById(id: number): Promise<Task> {\n    const response = await api.get(`/tasks/${id}`);\n    return response.data;\n  },\n\n  async create(task: Partial<Task>): Promise<Task> {\n    const response = await api.post('/tasks', task);\n    return response.data;\n  },\n\n  async update(id: number, task: Partial<Task>): Promise<Task> {\n    const response = await api.put(`/tasks/${id}`, task);\n    return response.data;\n  },\n\n  async delete(id: number): Promise<void> {\n    await api.delete(`/tasks/${id}`);\n  },\n\n  async updateStatus(id: number, status: string): Promise<{ message: string; status: string }> {\n    const response = await api.patch(`/tasks/${id}/status`, { status });\n    return response.data;\n  },\n\n  async getComments(id: number): Promise<Comment[]> {\n    const response = await api.get(`/tasks/${id}/comments`);\n    return response.data;\n  },\n\n  async addComment(id: number, content: string): Promise<Comment> {\n    const response = await api.post(`/tasks/${id}/comments`, { content });\n    return response.data;\n  },\n\n  async getStats(): Promise<TaskStats> {\n    const response = await api.get('/tasks/stats/overview');\n    return response.data;\n  },\n};\n\n// Users API\nexport const usersService = {\n  async getAll(): Promise<User[]> {\n    const response = await api.get('/users');\n    return response.data;\n  },\n\n  async getById(id: number): Promise<User> {\n    const response = await api.get(`/users/${id}`);\n    return response.data;\n  },\n\n  async create(user: Partial<User>): Promise<User> {\n    const response = await api.post('/users', user);\n    return response.data;\n  },\n\n  async update(id: number, user: Partial<User>): Promise<User> {\n    const response = await api.put(`/users/${id}`, user);\n    return response.data;\n  },\n\n  async delete(id: number): Promise<void> {\n    await api.delete(`/users/${id}`);\n  },\n\n  async getWorkload(id: number): Promise<UserWorkload> {\n    const response = await api.get(`/users/${id}/workload`);\n    return response.data;\n  },\n\n  async getTasks(id: number, params?: { status?: string; priority?: string }): Promise<Task[]> {\n    const response = await api.get(`/users/${id}/tasks`, { params });\n    return response.data;\n  },\n\n  async changePassword(id: number, currentPassword: string, newPassword: string): Promise<void> {\n    await api.patch(`/users/${id}/password`, { current_password: currentPassword, new_password: newPassword });\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}