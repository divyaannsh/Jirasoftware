{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const authService = {\n  async login(username, password) {\n    const response = await api.post('/auth/login', {\n      username,\n      password\n    });\n    return response.data;\n  },\n  async register(userData) {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n  async getCurrentUser() {\n    const response = await api.get('/auth/me');\n    return response.data;\n  },\n  async logout() {\n    await api.post('/auth/logout');\n  },\n  async changePassword(currentPassword, newPassword) {\n    await api.post('/auth/change-password', {\n      current_password: currentPassword,\n      new_password: newPassword\n    });\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","authService","login","username","password","response","post","data","register","userData","getCurrentUser","get","logout","changePassword","currentPassword","newPassword","current_password","new_password"],"sources":["/Users/Shared/jira/client/src/services/authService.ts"],"sourcesContent":["import axios from 'axios';\nimport { User } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n});\n\n// Add token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport interface LoginResponse {\n  user: User;\n  token: string;\n  message: string;\n}\n\nexport const authService = {\n  async login(username: string, password: string): Promise<LoginResponse> {\n    const response = await api.post('/auth/login', { username, password });\n    return response.data;\n  },\n\n  async register(userData: {\n    username: string;\n    email: string;\n    password: string;\n    full_name: string;\n  }): Promise<LoginResponse> {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n\n  async getCurrentUser(): Promise<User> {\n    const response = await api.get('/auth/me');\n    return response.data;\n  },\n\n  async logout(): Promise<void> {\n    await api.post('/auth/logout');\n  },\n\n  async changePassword(currentPassword: string, newPassword: string): Promise<void> {\n    await api.post('/auth/change-password', { current_password: currentPassword, new_password: newPassword });\n  },\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN;AACX,CAAC,CAAC;;AAEF;AACAI,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAQF,OAAO,MAAMM,WAAW,GAAG;EACzB,MAAMC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB,EAA0B;IACtE,MAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,aAAa,EAAE;MAAEH,QAAQ;MAAEC;IAAS,CAAC,CAAC;IACtE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMC,QAAQA,CAACC,QAKd,EAA0B;IACzB,MAAMJ,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,gBAAgB,EAAEG,QAAQ,CAAC;IAC3D,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMG,cAAcA,CAAA,EAAkB;IACpC,MAAML,QAAQ,GAAG,MAAMhB,GAAG,CAACsB,GAAG,CAAC,UAAU,CAAC;IAC1C,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMK,MAAMA,CAAA,EAAkB;IAC5B,MAAMvB,GAAG,CAACiB,IAAI,CAAC,cAAc,CAAC;EAChC,CAAC;EAED,MAAMO,cAAcA,CAACC,eAAuB,EAAEC,WAAmB,EAAiB;IAChF,MAAM1B,GAAG,CAACiB,IAAI,CAAC,uBAAuB,EAAE;MAAEU,gBAAgB,EAAEF,eAAe;MAAEG,YAAY,EAAEF;IAAY,CAAC,CAAC;EAC3G;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}